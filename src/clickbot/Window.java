/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package clickbot;

import java.awt.AWTException;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author DeeGort
 */
public class Window extends javax.swing.JFrame {

    final JFileChooser fc = new JFileChooser();
    
    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
        setTitle("CBScript Beta");
    //    setResizable(false);
        setLocation(50, 50);
        
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/CBSicon.png")));
        
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
                e.printStackTrace();
            }
        SwingUtilities.updateComponentTreeUI(this);
        SwingUtilities.updateComponentTreeUI(fc);
        
        start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem3 = new javax.swing.JMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();
        startBotButton = new javax.swing.JButton();
        mpLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();
        saveasMenu = new javax.swing.JMenuItem();
        aboutMenu1 = new javax.swing.JMenu();
        aboutMenu = new javax.swing.JMenuItem();

        jMenuItem3.setText("jMenuItem3");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("CBSript"); // NOI18N

        input.setColumns(20);
        input.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 12)); // NOI18N
        input.setForeground(new java.awt.Color(51, 0, 102));
        input.setRows(5);
        input.setCaretColor(new java.awt.Color(102, 102, 102));
        jScrollPane1.setViewportView(input);

        startBotButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Run.png"))); // NOI18N
        startBotButton.setText("Run");
        startBotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBotButtonActionPerformed(evt);
            }
        });

        mpLabel.setForeground(new java.awt.Color(102, 102, 102));
        mpLabel.setText("Mouse position");

        fileMenu.setText("File");

        openMenu.setText("Open");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);

        saveasMenu.setText("Save as");
        saveasMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveasMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveasMenu);

        jMenuBar1.add(fileMenu);

        aboutMenu1.setText("About");

        aboutMenu.setText("About");
        aboutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuActionPerformed(evt);
            }
        });
        aboutMenu1.add(aboutMenu);

        jMenuBar1.add(aboutMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(startBotButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mpLabel)
                    .addComponent(startBotButton))
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startBotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBotButtonActionPerformed
        startBot();
    }//GEN-LAST:event_startBotButtonActionPerformed

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed

        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try{
                Scanner scanner = new Scanner(file);
                input.setText("");
                while (scanner.hasNextLine()){
                    input.setText(input.getText() + scanner.nextLine() + (scanner.hasNextLine() ? "\n" : ""));
                }
            } catch (FileNotFoundException e)
            {
                
            }
        } else {
            //log.append("Open command cancelled by user." + newline);
        }
    }//GEN-LAST:event_openMenuActionPerformed

    private void saveasMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveasMenuActionPerformed
        
        int returnVal = fc.showSaveDialog(this);

        if (returnVal == 0)
        try(FileWriter fw = new FileWriter(fc.getSelectedFile()+".cbs")) {
            fw.write(input.getText());
            fw.close();
        } catch (IOException e)
        {
            
        }
    }//GEN-LAST:event_saveasMenuActionPerformed

    private void aboutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuActionPerformed
        About about = new About();
        
        java.awt.EventQueue.invokeLater(() -> {
            JFrame jframe = new JFrame();
            
            jframe.add(about);
            jframe.setTitle("About");
            jframe.getContentPane().setSize(about.getSize());
            jframe.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/CBSicon.png")));
            jframe.setResizable(false);
            jframe.setLocation(50, 50);
            jframe.pack();
            jframe.setVisible(true);
        });
    }//GEN-LAST:event_aboutMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Window().setVisible(true);
        });
    }
    
    
    private void start(){
        SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {

            @Override
            protected Void doInBackground() throws Exception {
               
                while(true){
                    Point p = MouseInfo.getPointerInfo().getLocation();
                    mpLabel.setText("X: " + Integer.toString(p.x) + " Y: " + Integer.toString(p.y));
                }
                
             //   return null;
            }

            @Override
            protected void done() {
                
            }

            @Override
            protected void process(List<String> chunks) {
                
            }
        };
        
        worker.execute();
    }
    
    private void startBot(){
        SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {
            
            protected Bot bot;
            protected HashMap<String , Integer> vars;
            
            public  int valueMinei(String str){
                Integer val = vars.get(str);
                if (val != null)
                    return val;
                else
                    return Integer.parseInt(str); // hibas lehet
            }
            
            public String valueMines(String str){
                Integer val = vars.get(str);
                if (val != null)
                    return Integer.toString(val);
                else
                    return str; // hibas lehet*/
            }
            
            protected void compile(Scanner scanner)
            {
                while(scanner.hasNext())
                    {
                        String command = scanner.next();
                        switch (command)
                        {
                            case "for":
                                // for i = 1 to 6
                                String forVarName = scanner.next(); // i
                                String forEqual = scanner.next(); // =
                                String forValue = scanner.next(); // from
                                String to = scanner.next();
                                String tovalue = scanner.next();
                                
                                if (forEqual.equals("=") && to.equals("to"))
                                    vars.put(forVarName, valueMinei(forValue));
                                
                                // command buffering
                                String forcommands = "";
                                String tmp = "";
                                int forcounter = 1;
                                while(forcounter > 0)
                                {
                                    forcommands += tmp;
                                    tmp = scanner.next() + " ";
                                    
                                    // Embded for handling
                                    if (tmp.equals("for "))
                                        forcounter++;
                                    if (tmp.equals("end "))
                                        forcounter--;
                                }
                                
                                // command loop exec
                                
                                // forever loop
                                if (valueMinei(tovalue) < 0)
                                    for (;;){
                                        Scanner forscanner = new Scanner(forcommands);
                                        compile(forscanner);
                                    }
                                
                                // normal loop
                                for (int i = valueMinei(forValue); i <= valueMinei(tovalue); i++){
                                    Scanner forscanner = new Scanner(forcommands);
                                    compile(forscanner);
                                }
                                break;
                            case "delay":
                                bot.delay(valueMinei(scanner.next()));
                                break;
                            case "move":
                                bot.move(valueMinei(scanner.next()), valueMinei(scanner.next()));
                                break;
                            case "click":
                                bot.click(scanner.next(), valueMinei(scanner.next()));
                                break;
                            case "hit_begin":
                                bot.hit_begin(valueMines(scanner.next()));
                                break;
                            case "hit_end":
                                bot.hit_end(valueMines(scanner.next()));
                                break;
                            case "hit":
                                bot.hit(valueMines(scanner.next()));
                                break;
                            case "type":
                                bot.type(valueMines(scanner.next()));
                                break;
                            case "set":
                                String varName = scanner.next();
                                String equal = scanner.next();
                                int value = valueMinei(scanner.next());
                                if (equal.equals("="))
                                    vars.put(varName, value);
                                System.out.println(varName + " = " + vars.get(varName));
                                break;
                            case "add":
                                String addVarName = scanner.next();
                                String adddeltaVar = scanner.next();
                                Integer addfirst = valueMinei(addVarName);
                                Integer addsecond = valueMinei(adddeltaVar);
                                vars.put(addVarName, addfirst + addsecond);
                                break;
                            case "sub":
                                String subVarName = scanner.next();
                                String subdeltaVar = scanner.next();
                                Integer subfirst = valueMinei(subVarName);
                                Integer subsecond = valueMinei(subdeltaVar);
                                vars.put(subVarName, subfirst - subsecond);
                                break;
                            case "mul":
                                String mulVarName = scanner.next();
                                String muldeltaVar = scanner.next();
                                Integer mulfirst = valueMinei(mulVarName);
                                Integer mulsecond = valueMinei(muldeltaVar);
                                vars.put(mulVarName, mulfirst * mulsecond);
                                break;
                            case "div":
                                String divVarName = scanner.next();
                                String divdeltaVar = scanner.next();
                                Integer divfirst = valueMinei(divVarName);
                                Integer divsecond = valueMinei(divdeltaVar);
                                vars.put(divVarName, divfirst * divsecond);
                                break;
                            case "%%":
                                 String comment = "";
                                 while (!comment.equals("%%"))
                                     comment = scanner.next();
                                break;
                            default:
                        }    
                    }
            }
            
            protected void compiler()
            {
                try{
                    bot = new Bot();
                    vars = new HashMap<String , Integer>();
                    Scanner scanner = new Scanner (input.getText());
                    
                    compile(scanner);
                }
                catch (AWTException e){
                
                }
            }
            
            @Override
            protected Void doInBackground() throws Exception {
               
                setState(JFrame.ICONIFIED);
                compiler();
                
                return null;
            }

            @Override
            protected void done() {
                
            }

            @Override
            protected void process(List<String> chunks) {
                
            }
        };
        
        worker.execute();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenu;
    private javax.swing.JMenu aboutMenu1;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextArea input;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mpLabel;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JMenuItem saveasMenu;
    private javax.swing.JButton startBotButton;
    // End of variables declaration//GEN-END:variables
}
